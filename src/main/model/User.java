package model;

import org.json.JSONObject;
import persistence.Writable;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.UUID;

// Represents a User having a username, password and an autogenerated salt and hashedPassword
public class User implements Writable {

    private String username;
    private String password;
    private String salt;
    private final String hashedPassword;

    // EFFECTS: constructs a user with provided username, password, and auto-generates the salt and hashedPassword
    public User(String username, String password) throws NoSuchAlgorithmException {
        this.username = username;
        this.password = password;
        this.salt = generateSalt();
        this.hashedPassword = generateHash(this.salt + this.password);
    }

    // EFFECTS: constructs a user with username, hashedPassword, and salt fetched from database
    public User(String username, String password, String salt) {
        this.username = username;
        this.hashedPassword = password;
        this.salt = salt;
    }

    public String getUsername() {
        return username;
    }

    public String getPassword() {
        return password;
    }

    public String getSalt() {
        return salt;
    }

    public String getHashedPassword() {
        return hashedPassword;
    }

    /*
        Citation - The generateHash implementation was mainly taken
        from https://dzone.com/articles/storing-passwords-java-web
        (Some code was modified)
    */

    /*
        EFFECTS: returns a unique hashed version of the user's password using
        the SHA-1 hashing algorithm. Salting is also used, which is prepended
        to the user's password before hashing it. Throws NoSuchAlgorithmException
        if the algorithm type (SHA-1) is not found (never actually thrown since it is hardcoded)
    */
    public String generateHash(String password) throws NoSuchAlgorithmException {
        StringBuilder hash = new StringBuilder();

        MessageDigest sha = MessageDigest.getInstance("SHA-1");
        byte[] hashedBytes = sha.digest(password.getBytes());
        char[] digits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
                'a', 'b', 'c', 'd', 'e', 'f'};
        for (byte b : hashedBytes) {
            hash.append(digits[(b & 0xf0) >> 4]);
            hash.append(digits[b & 0x0f]);
        }
        return hash.toString();
    }

    // EFFECTS: returns a unique salt string for each user, and replaces all hyphens, to produce an alphanumeric string
    private static String generateSalt() {
        // remove hyphens because the generateHash function might not work with them
        return UUID.randomUUID().toString().replace("-", "");
    }

    // EFFECTS: returns a JSONObject of the current user with username, hashedPassword, and salt
    @Override
    public JSONObject toJson() {
        return new JSONObject().put("username", this.username)
                .put("hashedPassword", this.hashedPassword)
                .put("salt", this.salt);
    }
}